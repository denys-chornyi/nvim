lua
  dchorn
	core
	plugins
	  lazy.lua
init.lua
lazy-lock.json

Brew uninstall neovim
Brew install neovim

Lazy.lua will setup lazy.nvim, which is a plugin manager, we will use to install and setup all of our plugins

Plugins folder contains a list of plugins we will use. Each of plugin has its own configuration

% - create file in default nvim
:w - save content
:q - quit
:wq - save and quit
:Explore - open file explorer
Esc - change mode while working with file 
:source % update changes live
:e lua/.../core/keymaps.lua - create a new file

First thing - change appearance (tree list style) of file explorer in options.lua

options.lua
vim.cmd("let g:netrw_liststyle = 3")

vim.cmd - runs vim script in lua file

Now we want to load file options.lua, that we just created in init.lua

init.lua
require("dchorn.core.options")

After closing and opening nvim we will see, that file explorer changes to tree format

Add some customisation to line number view

options.lua
local opt = vim.opt
opt.relativenumber = true
opt.number = true

Tabs and indentation
 
options.lua
opt.tabstop = 4 -- 4 spaces for tabs
opt.shiftwidth = 4 -- 4 spaces for indent width
opt.expandtab = true -- expend tab to spaces
opt.autoindent = true -- copy indent from current line when starting new one 

:h autoindent - info about indent options

options.lua
opt.wrap = false -- ??

-- search settings
opt.ignorecase = true -- ignore case when searching
opt.smartcase = true -- if you include mixed-case in your search, assumes you want case-sensitive

opt.cursorline = true -- ??

opt.termguicolors = true
opt.background = "dark" -- colorshemes that can be light or dark will be made dark
opt.signcolumn = "yes" -- show sign column so that text doesn't shift

-- backspace
opt.backspace = "indent,eol,start" -- allow backspace on indent, end of line or insert mode start position 

-- clipboard 
opt.clipboard:append("unnamedplus") -- use system clipboard as default register

-- split windows 
opt.splitright = true -- split vertical widow to the right 
opt.splitbelow = true -- split horizontal window to the bottom 

Now if we add require("dchorn.core.options") to init.lua, that lies in core folder, we can change require in main init.lua to require("dchorn.core")

Now we create keymaps.lua, to add some bindings

keymaps.lua
vim.g.mapleader = " "

local keymap = vim.keymap -- for conciseness

keymap.set("i", "jk", "<ESC>", { desc = "Exit insert mode with jk" }) -- "i" - mode, "jk" - binding, "<ESC>" - action
keymap.set("n", "<leader>nh", ":nohl<CR>", { desc = ""Clear search highlights }) 

-- increment/decrement numbers
keymap.set("n", "<leader>+", "<C-a>", { desc = "Increment number" }) -- leader - space
keymap.set("n", "<leader>-", "<C-x>", { desc = "Decrement number" })

-- Duplicate the current line in normal mode
vim.keymap.set("n", "<leader>d", "yyp", { desc = "Duplicate the current line in normal mode" })

-- Duplicate the selected lines in visual mode
vim.keymap.set("v", "<leader>d", "y'>p", { desc = " Duplicate the selected lines in visual mode" })

-- { noremap = true, silent = true} ensures that the mapping is non-recursive and doesn't show a message every time you save.

-- window management
keymap.set("n", "<leader>sv", "<C-w>v", { desc = "Split window vertically" })
keymap.set("n", "<leader>sh", "<C-w>s", { desc = "Split window horizontally" })
keymap.set("n", "<leader>se", "<C-w>=", { desc = "Make splits equal size" })
keymap.set("n", "<leader>sx", "<cmd>close<CR>", { desc = "Close current split" })

-- file can be split in different tabs
keymap.set("n", "<leader>to", "<cmd>tabnew<CR>", { desc = "Open new tab" })
keymap.set("n", "<leader>tx", "<cmd>tabclose<CR>", { desc = "Close current tab" })
keymap.set("n", "<leader>tn", "<cmd>tabn<CR>", { desc = "Go to next tab" })
keymap.set("n", "<leader>tp", "<cmd>tabp<CR>", { desc = "Go to previous tab" })
keymap.set("n", "<leader>tf", "<cmd>tabnew %<CR>", { desc = "Open current buffer in new tab" })

-- Map Ctrl+q to move to a new line without splitting the current line in insert mode
keymap.set("i", "<C-q>", "<Esc>o", { noremap = true, silent = true })

-- Map Ctrl+S to save the file in insert mode
vim.keymap.set("i", "<C-s>", "<Esc>:w<CR>a", { noremap = true, silent = true })


Plugin manager lazy.nvim

lazy.lua 
local lazypath = vim.fn.stdpath("data") .. "/lazy/lazy.nvim"

if not vim.loop.fs_stat(lazypath) then 
    vim.fn.system({
        "git",
        "clone",
        "--filter=blob:none",
        "https://github.com/folke/lazy.nvim.git",
        "--branch=stable", --latest stable release
        lazypath,
    })
end
vim.opt.rtp:pretend(lazypath)

When we open neovim, this script will make sure, that lazy.nvim is installed, if not it will load lazy.nvim from git.

lazy.lua
require("lazy").setup("dchorn.plugins")

We pass a folder to all of our plugins and specs

init.lua
require(dehorn.lazy)

After saving and entering nvim command, we will get message, that says that no plugins are installed (No specs found for module "dchorn.plugins"). We should type enter. And now we have :Lazy command, that will open lazy.nvim ui. 

Press q to close lazy ui.

Create file lua/dchorn/plugins/init.lua to install basic plugins

Lazy can detect changes in plugin files. Lazy will reload.

Shift+I to install plugins

:Lazy update - for updating plugins

There is always only single colorscheme plugin available for single nvim instance

Some basic plugins

init.lua
return {
    "nvim-lua/plenary.nvim", -- lua functions that many plugins use
    "christoomey/vim-tmux-navigator", -- tmux & split window navigation
}

Some basic colorschemes

colorscheme.lua
return {

    -- Colorscheme tokyonight
    "folke/tokyonight.nvim",
    priority = 1000, -- to make sure, that plugin loads before any other
    config = function()
        vim.cmd("colorscheme tokyonight")
    end

    -- Colorscheme gruvbox
    -- "morhetz/gruvbox",
    -- priority = 1000, -- Ensure it loads before other plugins
    -- config = function()
    --     vim.cmd("colorscheme gruvbox")
    -- end
    
    
    -- "arcticicestudio/nord-vim",
    -- priority = 1000, -- Ensure it loads before other plugins
    -- config = function()
    --     vim.cmd("colorscheme nord")
    -- end


}

































