lua
  dchorn
	core
	plugins
	  lazy.lua
init.lua
lazy-lock.json

Brew uninstall neovim
Brew install neovim

Lazy.lua will setup lazy.nvim, which is a plugin manager, we will use to install and setup all of our plugins

Plugins folder contains a list of plugins we will use. Each of plugin has its own configuration

% - create file in default nvim
:w - save content
:q - quit
:wq - save and quit
:Explore - open file explorer
Esc - change mode while working with file 
:source % update changes live

First thing - change appearance (tree list style) of file explorer in options.lua

options.lua
vim.cmd("let g:netrw_liststyle = 3")

vim.cmd - runs vim script in lua file

Now we want to load file options.lua, that we just created in init.lua

init.lua
require("dchorn.core.options")

After closing and opening nvim we will see, that file explorer changes to tree format

Add some customisation to line number view

options.lua
local opt = vim.opt
opt.relativenumber = true
opt.number = true

Tabs and indentation
 
options.lua
opt.tabstop = 4 -- 4 spaces for tabs
opt.shiftwidth = 4 -- 4 spaces for indent width
opt.expandtab = true -- expend tab to spaces
opt.autoindent = true -- copy indent from current line when starting new one 

:h autoindent - info about indent options

options.lua
opt.wrap = false -- ??

-- search settings
opt.ignorecase = true -- ignore case when searching
opt.smartcase = true -- if you include mixed-case in your search, assumes you want case-sensitive

opt.cursorline = true -- ??

opt.termguicolors = true
opt.background = "dark" -- colorshemes that can be light or dark will be made dark
opt.signcolumn = "yes" -- show sign column so that text doesn't shift

-- backspace
opt.backspace = "indent,eol,start" -- allow backspace on indent, end of line or insert mode start position 

-- clipboard 
opt.clipboard:append("unnamedplus") -- use system clipboard as default register

-- split windows 
opt.splitright = true -- split vertical widow to the right 
opt.splitbelow = true -- split horizontal window to the bottom 

Now if we add require("dchorn.core.options") to init.lua, that lies in core folder, we can change require in main init.lua to require("dchorn.core")



















